name: Release

permissions:
  pull-requests: write
  contents: write

on:
  pull_request:
  push:
    branches:
      - "master"
      - "main"
      - "alpha"
      - "beta"

jobs:
  # Start by creating the release where all the file will be built
  clientrs:
    env:
      RUNNER_TOOL_CACHE: /toolcache # Runner Tool Cache
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            features: --features all
            binary_name: binaries-linux-acl
            node-version: 20.x
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            features: --no-default-features --features "client,pool,server"
            binary_name: binaries-linux
            node-version: 20.x
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            features: --features all
            binary_name: binaries-windows
            node-version: 20.x
        # Disabled musl target for (depending of libm, libc,...)
        # - os: ubuntu-latest
        #   target: x86_64-unknown-linux-musl
        #   node-version: 20.x
        # need dependencies: # musl-dev musl-tools

    steps:
      - name: Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          apt-get update
          apt-get install -y protobuf-compiler cmake make build-essential git-lfs libacl1-dev

      - name: Checkout project
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{ matrix.target }}

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Install Node.JS
        uses: actions/setup-node@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          node-version: ${{ matrix.node-version }}

      - name: Unit test (release)
        run: cargo test --release --target ${{ matrix.target }} ${{ matrix.features }} -- --nocapture
        env:
          RUST_LOG: debug

      - name: Build (release)
        run: cargo build --verbose --release --target ${{ matrix.target }} ${{ matrix.features }}

      - name: Install cargo deb
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cargo-deb

      - name: Install Node.JS dependencies
        run: |
          npm ci

      - name: Build shared (rust + nodejs)
        run: |
          cd shared-rs
          npm run build
          cd ..

      - name: Build server
        run: |
          cd nestjs
          npm run lint
          npm run test
          npm run buildall
          cd ..

      - name: Build front
        run: |
          cd front
          npm run lint
          npm run build
          cd ..

      - name: Generate debian package
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo deb -p woodstock-client-rs --target ${{ matrix.target }}
          cargo deb -p woodstock-cli-rs --target ${{ matrix.target }}
          cargo deb -p ws_backuppc_importer --target ${{ matrix.target }}

      - name: Upload artifacts
        uses: christopherhx/gitea-upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: |
            target/${{ matrix.target }}/release/ws_client_daemon
            target/${{ matrix.target }}/release/ws_client_daemon.exe
            target/${{ matrix.target }}/release/ws_console
            target/${{ matrix.target }}/release/ws_console.exe
            target/${{ matrix.target }}/release/ws_backuppc_importer
            target/${{ matrix.target }}/release/ws_backuppc_importer.exe

      - name: Upload artifacts (part2)
        if: matrix.os == 'ubuntu-latest'
        uses: christopherhx/gitea-upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}_deb
          path: |
            target/${{ matrix.target }}/debian/*.deb

  upload:
    needs: [clientrs, backuppc]
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y git-lfs

      - name: Setup Node.js
        uses: actions/setup-node@v3

      - name: Checkout project
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Install dependencies
        run: npm ci

      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures

      - name: Download artifacts
        uses: christopherhx/gitea-download-artifact@v4

      - name: Display structure of downloaded files
        run: |
          mkdir bin
          mv ./binaries-linux-acl/ws_client_daemon ./bin/ws_client_daemon
          mv ./binaries-linux-acl/ws_console ./bin/ws_console
          mv ./binaries-linux-acl_deb/*.deb ./bin/
          mv ./binaries-linux/ws_client_daemon ./bin/ws_client_daemon_lite
          mv ./binaries-linux/ws_console ./bin/ws_console_lite
          mv ./binaries-linux/ws_backuppc_importer ./bin/ws_backuppc_importer
          mv ./binaries-windows/ws_client_daemon.exe ./bin/ws_client_daemon.exe
          mv ./binaries-windows/ws_console.exe ./bin/ws_console.exe
          mv ./binaries-windows/ws_backuppc_importer.exe ./bin/ws_backuppc_importer.exe
          shasum --algorithm 256 --binary ./bin/* | tee ./bin/SHA256SUM.txt
          cat ./bin/SHA256SUM.txt

      - name: Import GPG key
        when: github.event_name == 'push'
        id: import-gpg
        uses: https://github.com/crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          fingerprint: 0C69E9FC3A34B91A
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: GPG user IDs
        when: github.event_name == 'push'
        run: |
          echo "fingerprint: ${{ steps.import-gpg.outputs.fingerprint }}"
          echo "keyid:       ${{ steps.import-gpg.outputs.keyid }}"
          echo "name:        ${{ steps.import-gpg.outputs.name }}"
          echo "email:       ${{ steps.import-gpg.outputs.email }}"

      - name: Release
        when: github.event_name == 'push'
        env:
          GITEA_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          GITEA_URL: https://gogs.shadoware.org
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
        run: npx semantic-release

  docker:
    needs: [upload]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - rust_version: 1
            node_version: 20-slim
            features: --features all
    container:
      image: catthehacker/ubuntu:act-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3
        with:
          lfs: true
          ref: ${{ github.ref }}

      - name: Get version from package.json
        id: version
        run: echo ::set-output name=version::$(node -p "require('./package.json').version")

      - name: Get metadata to tag container image
        when: github.event_name == 'push'
        uses: https://github.com/docker/metadata-action@v4
        id: meta
        with:
          context: git
          # Liste des images Docker à utiliser comme base pour les tags
          images: |
            phoenix741/woodstock-backup
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }}

      - name: Get metadata to tag container image
        when: github.event_name == 'push'
        uses: https://github.com/docker/metadata-action@v4
        id: meta-website
        with:
          context: git
          # Liste des images Docker à utiliser comme base pour les tags
          images: |
            phoenix741/woodstock-backup-website
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }}

      - name: Setup docker
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        uses: docker/login-action@v2
        when: github.event_name == 'push'
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Build Server Docker Image
        uses: docker/build-push-action@v6
        env:
          ACTIONS_RUNTIME_TOKEN: ""
        with:
          file: Dockerfile
          context: .
          load: true
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha
          build-args: |
            RUST_VERSION=${{matrix.rust_version}}
            NODE_VERSION=${{matrix.node_version}}
            FEATURES=${{matrix.features}}

      - name: Build Website Docker Image
        uses: docker/build-push-action@v6
        env:
          ACTIONS_RUNTIME_TOKEN: ""
        with:
          file: ./docs/website/Dockerfile
          context: ./docs/website
          load: true
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta-website.outputs.tags }}
          labels: ${{ steps.meta-website.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha
